import pandas as pd
import matplotlib.pyplot as plt

# 📌 دالة لتحليل بيانات المبيعات
def analyze_sales(df):
    """تحليل شامل لبيانات المبيعات"""
    print(f"🧾 عدد الفواتير: {df.shape[0]}")
    print(f"💰 مجموع الإيرادات: {df['total'].sum():,.2f}")
    print(f"📈 متوسط قيمة الفاتورة: {df['total'].mean():,.2f}")
    print("⭐ أعلى منتج مبيعًا:")
    print(df['product'].value_counts().head(1))
    print("\n📊 أفضل 5 عملاء بالصرف:")
    print(df.groupby('customer_id')['total'].sum().sort_values(ascending=False).head(5))

    # رسم بياني لأفضل العملاء
    top_customers = df.groupby('customer_id')['total'].sum().sort_values(ascending=False).head(5)
    top_customers.plot(kind='bar', title='أفضل 5 عملاء بالصرف')
    plt.ylabel('الإجمالي')
    plt.xlabel('معرف العميل')
    plt.show()
====================================================================================================
# 📌 دالة لتحليل زيارات المرضى
def analyze_visits(df):
    """تحليل زيارات المرضى"""
    print(f"👨‍⚕️ عدد المرضى: {df['patient_id'].nunique()}")
    print(f"🗓️ عدد الزيارات: {df.shape[0]}")
    print("📍 أكثر عيادة زيارة:")
    print(df['clinic'].value_counts().head(1))
    print(f"\n📅 زيارات الشهر الحالي: {df[df['visit_date'].dt.month == pd.Timestamp.today().month].shape[0]}")

    # رسم بياني لأكثر العيادات زيارة
    df['clinic'].value_counts().head(5).plot(kind='barh', title='أكثر 5 عيادات زيارة')
    plt.xlabel('عدد الزيارات')
    plt.ylabel('العيادة')
    plt.gca().invert_yaxis()
    plt.show()
====================================================================================================
# 📌 دالة لتحليل بيانات المخزون
def analyze_inventory(df):
    """تحليل وضع المخزون"""
    print(f"📦 عدد المنتجات: {df.shape[0]}")
    print("🔻 المنتجات منخفضة المخزون:")
    print(df[df['quantity'] < 10][['item_name', 'quantity']])

    # رسم بياني للمنتجات الأعلى في الكمية
    df.sort_values('quantity', ascending=False).head(10).set_index('item_name')['quantity'].plot(kind='barh', title='أعلى 10 منتجات بالمخزون')
    plt.xlabel('الكمية')
    plt.gca().invert_yaxis()
    plt.show()
====================================================================================================
# 📌 دالة لتحليل مؤشرات الأداء
def analyze_kpis(df):
    """تحليل مؤشرات الأداء"""
    print(f"📊 عدد المؤشرات: {df.shape[0]}")
    achieved = (df['actual'] >= df['target']).sum()
    ratio = achieved / df.shape[0]
    print(f"✅ نسبة المؤشرات المحققة: {ratio:.2%}")
    print("\n❌ المؤشرات المتعثرة:")
    print(df[df['actual'] < df['target']][['kpi_name', 'target', 'actual']])

    # رسم بياني دائري للمؤشرات
    plt.pie([achieved, df.shape[0] - achieved], labels=['محَقّقة', 'متعَثّرة'], autopct='%1.1f%%', startangle=90)
    plt.title('نسبة تحقيق المؤشرات')
    plt.axis('equal')
    plt.show()


====================================================================================================
تحاليل عامه :

import pandas as pd
import matplotlib.pyplot as plt

# 📌 دالة 1: تحليل عام لأي جدول فيه تواريخ
def analyze_by_date(df, date_column):
    """
    تحليل بسيط للتواريخ: عدد السجلات بالشهر
    """
    df[date_column] = pd.to_datetime(df[date_column])  # تحويل العمود إلى تاريخ
    monthly_counts = df[date_column].dt.to_period("M").value_counts().sort_index()

    print("📆 عدد السجلات لكل شهر:")
    print(monthly_counts)

    monthly_counts.plot(kind="bar", figsize=(12, 5), title="📊 السجلات الشهرية")
    plt.xlabel("الشهر")
    plt.ylabel("عدد السجلات")
    plt.grid(True)
    plt.tight_layout()
    plt.show()
====================================================================================================

# 📌 دالة 2: تحليل الكميات – تصلح للمخزون أو المرضى أو الطلبيات
def analyze_quantity(df, item_column, quantity_column, top_n=10):
    """
    عرض أكثر العناصر انتشارًا أو طلبًا
    """
    item_counts = df.groupby(item_column)[quantity_column].sum().sort_values(ascending=False).head(top_n)

    print("🏷️ أعلى العناصر:")
    print(item_counts)

    item_counts.plot(kind="bar", figsize=(12, 5), title="📦 أكثر العناصر شيوعًا")
    plt.xlabel("العنصر")
    plt.ylabel("الإجمالي")
    plt.grid(True)
    plt.tight_layout()
    plt.show()
====================================================================================================

# 📌 دالة 3: تحليل النسب (مثلاً هل تم تحقيق الهدف أم لا – للـ KPI أو بيانات مرضى)
def analyze_status_ratio(df, status_column, target_value='Achieved'):
    """
    تحليل النسبة المئوية للحالات المحققة مقابل غير المحققة
    """
    counts = df[status_column].value_counts(normalize=True) * 100

    print("📈 نسب الحالات:")
    print(counts.round(2))

    counts.plot(kind="pie", autopct='%1.1f%%', title="🎯 حالة الأداء", figsize=(6, 6))
    plt.ylabel("")
    plt.tight_layout()
    plt.show()
====================================================================================================

# 📌 دالة 4: تحليل العميل أو المورد الأعلى حسب القيمة
def top_entity_by_value(df, entity_column, value_column, top_n=5):
    """
    عرض أعلى الكيانات (مثل العملاء أو الموردين) حسب القيمة
    """
    totals = df.groupby(entity_column)[value_column].sum().sort_values(ascending=False).head(top_n)

    print(f"🔝 أعلى {entity_column}:")
    print(totals)

    totals.plot(kind="bar", figsize=(10, 5), title=f"🏆 الأعلى حسب {value_column}")
    plt.xlabel(entity_column)
    plt.ylabel("القيمة")
    plt.grid(True)
    plt.tight_layout()
    plt.show()
====================================================================================================
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# ✅ 1. دالة تلخيص ذكية لأي DataFrame
def summarize_dataframe(df):
    """طباعة ملخص إحصائي شامل للبيانات"""
    print("🧾 عدد الصفوف × الأعمدة:", df.shape)
    print("\n🔍 معلومات الأعمدة:")
    print(df.dtypes)
    
    print("\n📉 القيم الفارغة لكل عمود:")
    print(df.isnull().sum())
    
    print("\n📊 الإحصائيات العامة:")
    display(df.describe(include='all').transpose())
====================================================================================================
# ✅ 2. دالة رسم سلسلة زمنية (Time Series)
def plot_time_series(df, date_col, value_col):
    """
    ترسم تطور القيم مع الوقت (ممتاز لتحليل الاتجاهات).
    df: بياناتك
    date_col: اسم عمود التاريخ
    value_col: العمود الذي تريد تحليله عبر الزمن
    """
    df[date_col] = pd.to_datetime(df[date_col])  # التأكد من أن العمود تاريخ
    df_sorted = df.sort_values(by=date_col)
    
    plt.figure(figsize=(12, 6))
    plt.plot(df_sorted[date_col], df_sorted[value_col], marker='o')
    plt.title(f"📈 {value_col} عبر {date_col}")
    plt.xlabel("التاريخ")
    plt.ylabel(value_col)
    plt.grid(True)
    plt.tight_layout()
    plt.show()
====================================================================================================
# ✅ 3. دالة مقارنة القيم حسب الفئة (Group By)
def compare_groups(df, group_col, value_col):
    """
    تلخيص القيم حسب كل مجموعة (مثل المتوسط، الانحراف المعياري، العدد).
    مفيد جدًا للمقارنة بين الفئات.
    
    df: DataFrame
    group_col: العمود الذي يمثل الفئات (مثل الجنس، الفرع، المنطقة)
    value_col: العمود الذي تريد تلخيصه (مثل التكلفة، عدد المرضى)
    """
    summary = df.groupby(group_col)[value_col].agg(['count', 'mean', 'std', 'min', 'max']).reset_index()
    print(f"📊 مقارنة {value_col} حسب {group_col}:")
    display(summary)
