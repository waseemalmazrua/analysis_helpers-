import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import shapiro
from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.tools.tools import add_constant

# 1. تعبئة القيم المفقودة بالـ mode
def fill_missing_by_mode(df, column):
    mode = df[column].mode()[0]
    df[column].fillna(mode, inplace=True)

# 2. تعبئة القيم المفقودة حسب التوزيع الأصلي
def fill_missing_by_distribution(df, column):
    dist = df[column].value_counts(normalize=True)
    n_missing = df[column].isnull().sum()
    fill_values = np.random.choice(dist.index, size=n_missing, p=dist.values)
    df.loc[df[column].isnull(), column] = fill_values

# 3. حذف القيم المتطرفة
def remove_outliers(df, column, upper_threshold):
    return df[df[column] < upper_threshold]

# 4. حساب VIF
def calculate_vif(df):
    X = add_constant(df.select_dtypes(include='number').dropna())
    vif_df = pd.DataFrame()
    vif_df["feature"] = X.columns
    vif_df["VIF"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]
    return vif_df

# 5. رسم Box Plot
def plot_boxplot(df, column):
    sns.boxplot(data=df, x=column)
    plt.title(f'Boxplot for {column}')
    plt.show()

# 6. فحص التوزيع الطبيعي
def check_normality(series, alpha=0.05):
    stat, p = shapiro(series.dropna())
    if p > alpha:
        print("✅ Data looks normally distributed (p > 0.05)")
    else:
        print("⚠️ Data does NOT look normally distributed (p <= 0.05)")

# 7. ترميز الأعمدة الفئوية
def encode_categorical_columns(df):
    df_encoded = pd.get_dummies(df, drop_first=True)
    return df_encoded

# 8. رسم Heatmap للارتباط
def visualize_correlation(df):
    corr = df.select_dtypes(include='number').corr()
    plt.figure(figsize=(10, 6))
    sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f")
    plt.title("Correlation Heatmap")
    plt.show()

# 9. حذف الصفوف المكررة
def detect_and_drop_duplicate_rows(df):
    return df.drop_duplicates()

# 10. تلخيص التوزيع للفئات
def summarize_categorical_distribution(df, column):
    counts = df[column].value_counts()
    percentages = df[column].value_counts(normalize=True) * 100
    summary = pd.DataFrame({'Count': counts, 'Percentage': percentages.round(2)})
    return summary
