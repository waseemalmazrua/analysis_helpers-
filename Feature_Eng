🔠 1. create_length_feature
الوصف: إنشاء عمود جديد يحتوي على طول النص (عدد الأحرف) في كل صف.
يُستخدم عندما يكون عندك عمود نصي وتبي تعرف طوله، مثل مراجعة أو تعليق.

df['text_length'] = df['text'].apply(len)
# ✅ يحسب عدد الأحرف في عمود 'text' ويحفظها في 'text_length'
===========================================================
📅 2. extract_year_from_date
الوصف: استخراج السنة من عمود تاريخ.
مفيد في تحليل الاتجاهات حسب السنة مثل سنة النشر أو التسجيل.

df['year'] = pd.to_datetime(df['date']).dt.year
# ✅ يحوّل النص إلى تاريخ ثم يأخذ السنة فقط
============================================================
🚨 3. is_missing
الوصف: إنشاء عمود فيه 1 إذا كانت القيمة مفقودة، و0 إذا موجودة.
مفيد للكشف عن أنماط فقد البيانات.
df['col_is_missing'] = df['col'].isna().astype(int)

#  1 = مفقود، 0 = موجود

=======================================================
📊 4. count_category_frequency
الوصف: يحسب تكرار كل فئة (category) ويضيفها كقيمة جديدة.
مفيد للربط بين شيوع الفئة وتأثيرها.

freq_map = df['category'].value_counts()
df['category_freq'] = df['category'].map(freq_map)

# ✅ كل صف يأخذ عدد مرات تكرار فئته
=============================================================
🔁 5. binarize_column
الوصف: تحويل عمود رقمي إلى 0 أو 1 حسب شرط معين.
مثال: نجاح أو فشل، إيجابي أو سلبي.
df['passed'] = (df['score'] >= 50).astype(int)

# ✅ 1 إذا الدرجة 50 أو أكثر، غير كذا 0
================================================================
🤝 6. combine_columns
الوصف: دمج عمودين في عمود جديد (مثل الاسم الكامل).
مفيد لإنشاء وصف موحّد.

df['full_name'] = df['first_name'] + ' ' + df['last_name']

# ✅ يدمج الاسم الأول والأخير مع فراغ بينهم
====================================================================
🧠 7. groupby_mean_encoding
الوصف: تحويل الفئة إلى متوسط القيمة المستهدفة (target) لكل مجموعة.
مفيد جدًا في النماذج التنبؤية.

df['category_encoded'] = df.groupby('category')['target'].transform('mean')

# ✅ كل فئة تُستبدل بمتوسط هدفها
===========================================================================
📉 8. log_transform
الوصف: تقليل تأثير القيم الكبيرة بتطبيق log.
مفيد لتصحيح الانحراف (skewness) في التوزيع.

df['log_income'] = np.log1p(df['income'])

# ✅ log(1 + income) لتفادي log(0)
==========================================================================
🔍 9. extract_text_features
الوصف: الكشف عن وجود كلمة معينة داخل النص (مثل "excellent").
مفيد جدًا لتحليل المشاعر أو جودة المحتوى.

df['contains_excellent'] = df['review'].str.contains('excellent', case=False).astype(int)
# ✅ 1 إذا النص يحتوي على "excellent"، 0 غير ذلك

==========================================================================================
🏅 10. rank_within_group
الوصف: ترتيب القيم داخل كل مجموعة (مثل أعلى تقييم داخل كل دولة).
مفيد في التقييمات والترتيب المحلي.

df['score_rank'] = df.groupby('country')['score'].rank(ascending=False)
# ✅ يعطي كل صف ترتيبه داخل مجموعته بناءً على score

==================================================================================



